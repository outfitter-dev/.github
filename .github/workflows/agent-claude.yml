name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    # Allow specific bots (@copilot[bot], @devin[bot], @coderabbitai[bot]) and all humans to trigger Claude
    if: >
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '@claude') &&
       (github.event.comment.user.type != 'Bot' ||
        contains(fromJSON('["copilot[bot]", "devin[bot]", "coderabbitai[bot]", "cursor[bot]"]'), github.event.comment.user.login))) ||
      (github.event_name == 'pull_request_review_comment' &&
       contains(github.event.comment.body, '@claude') &&
       (github.event.comment.user.type != 'Bot' ||
        contains(fromJSON('["copilot[bot]", "devin[bot]", "coderabbitai[bot]", "cursor[bot]"]'), github.event.comment.user.login))) ||
      (github.event_name == 'pull_request_review' &&
       contains(github.event.review.body, '@claude') &&
       (github.event.review.user.type != 'Bot' ||
        contains(fromJSON('["copilot[bot]", "devin[bot]", "coderabbitai[bot]", "cursor[bot]"]'), github.event.review.user.login))) ||
      (github.event_name == 'issues' &&
       github.event.action == 'assigned' &&
       github.event.assignee &&
       github.event.assignee.login == 'claude')
    runs-on: ubuntu-latest
    concurrency:
      group: claude-${{ github.event.pull_request.number || github.event.issue.number || github.run_id }}
      cancel-in-progress: true
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          # Provide Claude with custom instructions
          prompt: |
            You have been granted tools for editing files and running bun commands (install, run, test, typecheck, format, lint, sandbox, pre*) for testing your changes.
            You also have access to sequential thinking MCP server to work out more complex problems. Use it to think longer.
            Use Bun to the fullest extent.
            Don't .gitignore `.agent/` or `path/to/rules` if they're not compiled with Rulesets.
          
          # Claude CLI arguments
          claude_args: |
            --model claude-opus-4-1-20250805
            --max-turns 10

          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test
